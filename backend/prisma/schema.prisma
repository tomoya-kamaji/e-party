generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// ユーザー
model User {
    id         String   @id @default(uuid()) // ユーザーのID
    auth_id    String   @unique // 認証用ID (外部IDなど)
    email      String   @unique // ユーザーのメールアドレス
    name       String // ユーザー名
    image_url  String // プロフィール画像のURL
    created_at DateTime @default(now()) // 作成日時
    updated_at DateTime @updatedAt // 更新日時

    votes       Vote[] // ユーザーに紐づく投票
    owned_rooms Room[] @relation("RoomOwner") // オーナーとして作成したルーム

    @@map("users")
}

model Room {
    id         String     @id @default(uuid()) // ルームのID
    name       String
    status     RoomStatus @default(OPEN) // ルームの状態
    owner_id   String // オーナーID
    created_at DateTime   @default(now()) // 作成日時
    updated_at DateTime   @updatedAt // 更新日時

    owner User   @relation("RoomOwner", fields: [owner_id], references: [id]) // オーナーとのリレーション
    votes Vote[] // ルームに紐づく投票

    @@map("rooms")
}

model Vote {
    id          String   @id @default(uuid()) // 投票のID
    room_id     String // 対象のルームID
    user_id     String // 投票したユーザーのID
    value       String? // 投票内容 (カードの値: 例 1, 2, 3, "?" など)
    is_revealed Boolean  @default(false) // 投票が公開されたかどうか
    created_at  DateTime @default(now()) // 投票作成日時

    room Room @relation(fields: [room_id], references: [id]) // Roomへのリレーション
    user User @relation(fields: [user_id], references: [id]) // Userへのリレーション

    @@unique([room_id, user_id]) // 各ルームで同じユーザーが複数の投票を持たないことを保証
    @@map("votes")
}

enum RoomStatus {
    OPEN // ルームが開いていて、参加可能
    CLOSED // ルームが閉じていて、参加不可
}
