generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator markdown {
    provider = "prisma-markdown"
    output   = "./ERD.md"
    title    = "ER図"
}

//-----------------------------------------------------------
// users
//-----------------------------------------------------------

/// Google認証の情報を管理します
/// ユーザー情報を格納します
model User {
    id          String   @id @default(uuid())
    /// Google認証ID
    googleId    String   @unique
    /// ユーザーのメールアドレス
    email       String   @unique
    /// ユーザー名
    name        String
    /// 作成日時
    created_at  DateTime @default(now())
    /// 更新日時
    updated_at  DateTime @updatedAt
    votes       Vote[] // ユーザーに紐づく投票
    owned_rooms Room[]   @relation("RoomOwner") // オーナーとして作成したルーム

    RoomUser RoomUser[]

    @@map("users")
}

//-----------------------------------------------------------
// rooms
//-----------------------------------------------------------

/// プランニングポーカーの部屋を管理
/// ルームの情報を格納します
model Room {
    id         String     @id @default(uuid())
    /// 部屋名（オプション）
    name       String?
    /// オーナーID
    owner_id   String
    /// 部屋へのユニークなURL
    url        String     @unique
    /// 作成日時
    created_at DateTime   @default(now())
    /// 更新日時
    owner      User       @relation("RoomOwner", fields: [owner_id], references: [id]) // オーナーとのリレーション
    room_user  RoomUser[]
    Topic      Topic?     @relation(fields: [topicId], references: [id])
    topicId    String?

    @@map("rooms")
}

//-----------------------------------------------------------
// room participants
//-----------------------------------------------------------

/// 各部屋の参加者を管理
/// ユーザーと部屋を紐づけます
model RoomUser {
    id        String   @id @default(uuid())
    /// 部屋ID
    room_id   String
    /// ユーザーID
    user_id   String
    /// 参加日時
    joined_at DateTime @default(now())

    room Room @relation(fields: [room_id], references: [id], onDelete: Cascade)
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([room_id, user_id])
    @@map("room_users")
}

// トピック
model Topic {
    /// トピックのID
    id         String      @id @default(uuid())
    /// 部屋ID
    room_id    String
    /// トピックの状態
    status     TopicStatus @default(IN_PROGRESS)
    /// 作成日時
    created_at DateTime    @default(now())
    /// 更新日時
    updated_at DateTime    @updatedAt

    votes Vote[]
    rooms Room[]

    @@unique([room_id]) // トピックが1ルームに対して1つであることを保証
    @@map("topics")
}

// 投票
model Vote {
    id          String   @id
    /// 対象のお題のID
    topic_id    String
    /// 投票したユーザーのID
    user_id     String
    /// 投票内容 (カードの値: 例 1, 2, 3, "?" など)
    value       String?
    /// 投票が公開されたかどうか
    is_revealed Boolean  @default(false)
    /// 投票作成日時
    created_at  DateTime @default(now())

    topic Topic @relation(fields: [topic_id], references: [id])
    user  User  @relation(fields: [user_id], references: [id])

    @@map("votes")
}

enum RoomStatus {
    OPEN // ルームが開いていて、参加可能
    CLOSED // ルームが閉じていて、参加不可
}

enum TopicStatus {
    IN_PROGRESS // お題が進行中
    COMPLETED // お題が完了
}
